<Activity mc:Ignorable="sap sap2010 sads" x:Class="PackNet.Importer.Workflows.ImportPlugins.Order.AlternativeWorkflows.OrderImportX7Batch"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:mcwa="clr-namespace:Microsoft.Consulting.Workflow.Activities;assembly=Microsoft.Consulting.Workflow.Activities"
 xmlns:pcid="clr-namespace:PackNet.Common.Interfaces.DTO;assembly=PackNet.Common.Interfaces"
 xmlns:pcidm="clr-namespace:PackNet.Common.Interfaces.DTO.Machines;assembly=PackNet.Common.Interfaces"
 xmlns:pcidp="clr-namespace:PackNet.Common.Interfaces.DTO.Packages;assembly=PackNet.Common.Interfaces"
 xmlns:pcie="clr-namespace:PackNet.Common.Interfaces.Eventing;assembly=PackNet.Common.Interfaces"
 xmlns:pcie1="clr-namespace:PackNet.Common.Interfaces.Enums;assembly=PackNet.Common.Interfaces"
 xmlns:pcis="clr-namespace:PackNet.Common.Interfaces.Services;assembly=PackNet.Common.Interfaces"
 xmlns:pcw="clr-namespace:PackNet.Common.WorkflowActivities;assembly=PackNet.Common"
 xmlns:pcwp="clr-namespace:PackNet.Common.WorkflowActivities.Packages;assembly=PackNet.Common"
 xmlns:pcwr="clr-namespace:PackNet.Common.WorkflowActivities.Restrictions;assembly=PackNet.Common"
 xmlns:ppad="clr-namespace:PackNet.Plugins.ArticleService.DTO;assembly=PackNet.Plugins.ArticleService"
 xmlns:ppaw="clr-namespace:PackNet.Plugins.ArticleService.WorkflowCodeActivities;assembly=PackNet.Plugins.ArticleService"
 xmlns:pxa="clr-namespace:PackNet.X7Service.Activities;assembly=PackNet.X7Service"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Importable" Type="InArgument(pcid:Importable)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="ServiceLocator" Type="InArgument(pcis:IServiceLocator)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="FailedRows" Type="InOutArgument(scg:IDictionary(x:Int32, x:String))">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="CustomerUniqueIdsToRemove" Type="InOutArgument(scg:List(x:String))">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>PackNet.Importer.Workflows.ImportPlugins.Order.OrderImport_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>PackNet.Common.Interfaces.DTO</x:String>
      <x:String>PackNet.Common.Interfaces.Services</x:String>
      <x:String>PackNet.Common.Interfaces.DTO.Packages</x:String>
      <x:String>PackNet.Common.Interfaces.Enums</x:String>
      <x:String>PackNet.Plugins.ArticleService.DTO</x:String>
      <x:String>PackNet.Plugins.ArticleService.WorkflowCodeActivities</x:String>
      <x:String>PackNet.X7Service</x:String>
      <x:String>PackNet.Common.Interfaces.DTO.Machines</x:String>
      <x:String>PackNet.Common.Interfaces.Eventing</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>PackNet.X7Service</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Net.Http</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PackNet.Plugins.ArticleService</AssemblyReference>
      <AssemblyReference>CartonPropertyGroupService</AssemblyReference>
      <AssemblyReference>PackNet.Common.Interfaces</AssemblyReference>
      <AssemblyReference>PackNet.Common</AssemblyReference>
      <AssemblyReference>ExternalZebraPrintIntegration</AssemblyReference>
      <AssemblyReference>PackNet.IODeviceService</AssemblyReference>
      <AssemblyReference>PackNet.KvmService</AssemblyReference>
      <AssemblyReference>RestrictionService</AssemblyReference>
      <AssemblyReference>PackNet.ScandataService</AssemblyReference>
      <AssemblyReference>Microsoft.Consulting.Workflow.Activities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Workflows</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="rowNumber" />
      <Variable x:TypeArguments="pcidp:Job" Name="job" />
      <Variable x:TypeArguments="pcidp:Package" Name="package" />
    </Sequence.Variables>
    <Assign sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">
          <mca:CSharpReference x:TypeArguments="x:Int32">rowNumber</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">0</InArgument>
      </Assign.Value>
    </Assign>
    <ForEach x:TypeArguments="scg:IDictionary(x:String, x:String)" sap2010:Annotation.AnnotationText="Loop over all imported data to transform it into an Order then add it to a List. &#xA;&#xA;Imports default order data Type;OrderId;Quantity;ProductionGroupName;Length;Width;Height;CorrugateQuality;DesignId&#xA;&#xA;Order;order1;5;PG1;10;9;8;1;2010001" DisplayName="Convert Imported Data to Orders" sap2010:WorkflowViewState.IdRef="ForEach`1_1">
      <ForEach.Values>
        <InArgument x:TypeArguments="scg:IEnumerable(scg:IDictionary(x:String, x:String))">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(scg:IDictionary(x:String, x:String))">Importable.ImportedItems</mca:CSharpValue>
        </InArgument>
      </ForEach.Values>
      <ActivityAction x:TypeArguments="scg:IDictionary(x:String, x:String)">
        <ActivityAction.Argument>
          <DelegateInArgument x:TypeArguments="scg:IDictionary(x:String, x:String)" Name="row" />
        </ActivityAction.Argument>
        <TryCatch sap2010:WorkflowViewState.IdRef="TryCatch_2">
          <TryCatch.Try>
            <Sequence DisplayName="Create Job" sap2010:WorkflowViewState.IdRef="Sequence_7">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:Int32" Name="quantity" />
                <Variable x:TypeArguments="x:Boolean" Name="hasProductionGroupRestriction" />
                <Variable x:TypeArguments="x:String" Name="articleName" />
                <Variable x:TypeArguments="pcidm:MachineGroup" Name="x7Mg" />
                <Variable x:TypeArguments="pcis:IMachineGroupService" Name="mgService" />
                <Variable x:TypeArguments="x:Boolean" Default="False" Name="couldAddJob" />
                <Variable x:TypeArguments="x:String" Default="MG1" Name="machineGroupX7Alias" />
                <Variable x:TypeArguments="pcie:IUiCommunicationService" Name="uiCommunicatorService" />
                <Variable x:TypeArguments="x:String" Name="uniqueId" />
              </Sequence.Variables>
              <Assign sap2010:WorkflowViewState.IdRef="Assign_10">
                <Assign.To>
                  <OutArgument x:TypeArguments="pcis:IMachineGroupService">
                    <mca:CSharpReference x:TypeArguments="pcis:IMachineGroupService">mgService</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="pcis:IMachineGroupService">
                    <mca:CSharpValue x:TypeArguments="pcis:IMachineGroupService">ServiceLocator.Locate&lt;IMachineGroupService&gt;()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign sap2010:WorkflowViewState.IdRef="Assign_11">
                <Assign.To>
                  <OutArgument x:TypeArguments="pcidm:MachineGroup">
                    <mca:CSharpReference x:TypeArguments="pcidm:MachineGroup">x7Mg</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="pcidm:MachineGroup">
                    <mca:CSharpValue x:TypeArguments="pcidm:MachineGroup">mgService.MachineGroups.FirstOrDefault(mg =&gt; mg.Alias == machineGroupX7Alias)</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign sap2010:Annotation.AnnotationText="Track row number in case of import failure for logging purposes" DisplayName="Increment row number" sap2010:WorkflowViewState.IdRef="Assign_7">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">rowNumber</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">rowNumber + 1</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <pcw:ImportFieldLookup x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Import quantity from row. If no quantity is specified, default to 1." DefaultValue="1" DisplayName="Quantity" FieldToRetrieve="Quantity" sap2010:WorkflowViewState.IdRef="ImportFieldLookup`1_11">
                <pcw:ImportFieldLookup.OutputValue>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">quantity</mca:CSharpReference>
                  </OutArgument>
                </pcw:ImportFieldLookup.OutputValue>
                <pcw:ImportFieldLookup.Row>
                  <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                  </InArgument>
                </pcw:ImportFieldLookup.Row>
              </pcw:ImportFieldLookup>
              <DoWhile sap2010:WorkflowViewState.IdRef="DoWhile_1">
                <DoWhile.Condition>
                  <mca:CSharpValue x:TypeArguments="x:Boolean">quantity &gt; 0</mca:CSharpValue>
                </DoWhile.Condition>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_15">
                  <Assign sap2010:Annotation.AnnotationText="Create a new Order job" DisplayName="Create Job" sap2010:WorkflowViewState.IdRef="Assign_12">
                    <Assign.To>
                      <OutArgument x:TypeArguments="pcidp:Job">
                        <mca:CSharpReference x:TypeArguments="pcidp:Job">job</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="pcidp:Job">
                        <mca:CSharpValue x:TypeArguments="pcidp:Job">new Job(SelectionAlgorithmTypes.Order)</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <pcw:ImportFieldLookup x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Reads OrderId field from import data and assign it to CustomerUniqueId" DisplayName="Set Order Id" FieldToRetrieve="OrderId" sap2010:WorkflowViewState.IdRef="ImportFieldLookup`1_12">
                    <pcw:ImportFieldLookup.DefaultValue>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">Guid.NewGuid().ToString()</mca:CSharpValue>
                      </InArgument>
                    </pcw:ImportFieldLookup.DefaultValue>
                    <pcw:ImportFieldLookup.OutputValue>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpReference>
                      </OutArgument>
                    </pcw:ImportFieldLookup.OutputValue>
                    <pcw:ImportFieldLookup.Row>
                      <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                        <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                      </InArgument>
                    </pcw:ImportFieldLookup.Row>
                  </pcw:ImportFieldLookup>
                  <Sequence sap2010:Annotation.AnnotationText="This sequence adds either a ProductionGroupRestriction or MachineGroupRestriction" DisplayName="Production/Machine Group Restriction" sap2010:WorkflowViewState.IdRef="Sequence_12">
                    <pcwr:TryAddProductionGroupRestriction DefaultLookupValue="{x:Null}" sap2010:Annotation.AnnotationText="Looks for a production group restriction value in the imported row. If one exists the restriction is added to the job." DisplayName="Try Add Production Group Restriction" FieldToRetrieve="ProductionGroupName" sap2010:WorkflowViewState.IdRef="TryAddProductionGroupRestriction_3">
                      <pcwr:TryAddProductionGroupRestriction.HasRestriction>
                        <OutArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpReference x:TypeArguments="x:Boolean">hasProductionGroupRestriction</mca:CSharpReference>
                        </OutArgument>
                      </pcwr:TryAddProductionGroupRestriction.HasRestriction>
                      <pcwr:TryAddProductionGroupRestriction.ImportRow>
                        <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                          <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                        </InArgument>
                      </pcwr:TryAddProductionGroupRestriction.ImportRow>
                      <pcwr:TryAddProductionGroupRestriction.ProductionItem>
                        <InArgument x:TypeArguments="pcidp:Restrictable">
                          <mca:CSharpValue x:TypeArguments="pcidp:Restrictable">job</mca:CSharpValue>
                        </InArgument>
                      </pcwr:TryAddProductionGroupRestriction.ProductionItem>
                    </pcwr:TryAddProductionGroupRestriction>
                    <If sap2010:Annotation.AnnotationText="If no production group restriction exists then a machine group restriction is added" DisplayName="If there is no ProductionGroupRestriction" sap2010:WorkflowViewState.IdRef="If_8">
                      <If.Condition>
                        <InArgument x:TypeArguments="x:Boolean">
                          <mca:CSharpValue x:TypeArguments="x:Boolean">!hasProductionGroupRestriction</mca:CSharpValue>
                        </InArgument>
                      </If.Condition>
                      <If.Then>
                        <pcwr:TryAddMachineGroupRestriction DefaultLookupValue="{x:Null}" HasRestriction="{x:Null}" FieldToRetrieve="MachineGroupName" sap2010:WorkflowViewState.IdRef="TryAddMachineGroupRestriction_2">
                          <pcwr:TryAddMachineGroupRestriction.ImportRow>
                            <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                              <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                            </InArgument>
                          </pcwr:TryAddMachineGroupRestriction.ImportRow>
                          <pcwr:TryAddMachineGroupRestriction.ProductionItem>
                            <InArgument x:TypeArguments="pcidp:Restrictable">
                              <mca:CSharpValue x:TypeArguments="pcidp:Restrictable">job</mca:CSharpValue>
                            </InArgument>
                          </pcwr:TryAddMachineGroupRestriction.ProductionItem>
                        </pcwr:TryAddMachineGroupRestriction>
                      </If.Then>
                    </If>
                  </Sequence>
                  <pcwr:AddDistributedRestrictionBasedOnProductionGroupSettings sap2010:Annotation.AnnotationText="Specifies whether the job is distributed by default. This is based on a production group setting." sap2010:WorkflowViewState.IdRef="AddDistributedRestrictionBasedOnProductionGroupSettings_2">
                    <pcwr:AddDistributedRestrictionBasedOnProductionGroupSettings.Job>
                      <InArgument x:TypeArguments="pcidp:Job">
                        <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                      </InArgument>
                    </pcwr:AddDistributedRestrictionBasedOnProductionGroupSettings.Job>
                    <pcwr:AddDistributedRestrictionBasedOnProductionGroupSettings.ServiceLocator>
                      <InArgument x:TypeArguments="pcis:IServiceLocator">
                        <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                      </InArgument>
                    </pcwr:AddDistributedRestrictionBasedOnProductionGroupSettings.ServiceLocator>
                  </pcwr:AddDistributedRestrictionBasedOnProductionGroupSettings>
                  <pcw:ImportFieldLookup x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="AdditionalInfo14" DisplayName="Get CustomerUniqueId" FieldToRetrieve="AdditionalInfo14" sap2010:WorkflowViewState.IdRef="ImportFieldLookup`1_14">
                    <pcw:ImportFieldLookup.DefaultValue>
                      <InArgument x:TypeArguments="x:String">
                        <Literal x:TypeArguments="x:String" Value="" />
                      </InArgument>
                    </pcw:ImportFieldLookup.DefaultValue>
                    <pcw:ImportFieldLookup.OutputValue>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">uniqueId</mca:CSharpReference>
                      </OutArgument>
                    </pcw:ImportFieldLookup.OutputValue>
                    <pcw:ImportFieldLookup.Row>
                      <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                        <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                      </InArgument>
                    </pcw:ImportFieldLookup.Row>
                  </pcw:ImportFieldLookup>
                  <If sap2010:Annotation.AnnotationText="If Additional14 presents, means a regular parcel, it can be either 12 (DHL Germany) or 13 (DHL International) digitals. If not, it will be a batch production, use the additionalInfo 13 for title." sap2010:WorkflowViewState.IdRef="If_10">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrEmpty(uniqueId)</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_16">
                        <pcw:ImportFieldLookup x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="AdditionalInfo13" DefaultValue="NoID_Found" DisplayName="Get AdditionalInfo 13" FieldToRetrieve="AdditionalInfo13" sap2010:WorkflowViewState.IdRef="ImportFieldLookup`1_15">
                          <pcw:ImportFieldLookup.OutputValue>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">uniqueId</mca:CSharpReference>
                            </OutArgument>
                          </pcw:ImportFieldLookup.OutputValue>
                          <pcw:ImportFieldLookup.Row>
                            <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                              <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                            </InArgument>
                          </pcw:ImportFieldLookup.Row>
                        </pcw:ImportFieldLookup>
                        <Assign sap2010:WorkflowViewState.IdRef="Assign_16">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">uniqueId +"-"+DateTime.Now.ToString("ssffff")</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Assign sap2010:WorkflowViewState.IdRef="Assign_17">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">
                            <mca:CSharpReference x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">uniqueId</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_18">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">job.Title</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:Annotation.AnnotationText="Create new package to for job." sap2010:WorkflowViewState.IdRef="Assign_13">
                    <Assign.To>
                      <OutArgument x:TypeArguments="pcidp:Package">
                        <mca:CSharpReference x:TypeArguments="pcidp:Package">package</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="pcidp:Package">
                        <mca:CSharpValue x:TypeArguments="pcidp:Package">new Package()</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                  <pcw:ImportFieldLookup x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Get the name of the article that should be used as the template." DisplayName="Get article name" FieldToRetrieve="ArticleId" sap2010:WorkflowViewState.IdRef="ImportFieldLookup`1_13">
                    <pcw:ImportFieldLookup.DefaultValue>
                      <InArgument x:TypeArguments="x:String">
                        <Literal x:TypeArguments="x:String" Value="" />
                      </InArgument>
                    </pcw:ImportFieldLookup.DefaultValue>
                    <pcw:ImportFieldLookup.OutputValue>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">articleName</mca:CSharpReference>
                      </OutArgument>
                    </pcw:ImportFieldLookup.OutputValue>
                    <pcw:ImportFieldLookup.Row>
                      <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                        <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                      </InArgument>
                    </pcw:ImportFieldLookup.Row>
                  </pcw:ImportFieldLookup>
                  <If sap2010:WorkflowViewState.IdRef="If_9">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">string.IsNullOrWhiteSpace(articleName) == false</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Sequence DisplayName="Create job from article" sap2010:WorkflowViewState.IdRef="Sequence_13">
                        <ppaw:ClearAndAddPackagesFromArticleToJob sap2010:Annotation.AnnotationText="Find the article with the imported name and add its items to the job. Any existing package will be cleared. &lt;Quantity&gt; number of packages will be added to the job." DisplayName="Set or replace packages on job to packages from article" sap2010:WorkflowViewState.IdRef="ClearAndAddPackagesFromArticleToJob_2">
                          <ppaw:ClearAndAddPackagesFromArticleToJob.ArticleName>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">articleName</mca:CSharpValue>
                            </InArgument>
                          </ppaw:ClearAndAddPackagesFromArticleToJob.ArticleName>
                          <ppaw:ClearAndAddPackagesFromArticleToJob.Job>
                            <InArgument x:TypeArguments="pcidp:Job">
                              <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                            </InArgument>
                          </ppaw:ClearAndAddPackagesFromArticleToJob.Job>
                          <ppaw:ClearAndAddPackagesFromArticleToJob.Quantity>
                            <InArgument x:TypeArguments="x:Int32">
                              <mca:CSharpValue x:TypeArguments="x:Int32">quantity</mca:CSharpValue>
                            </InArgument>
                          </ppaw:ClearAndAddPackagesFromArticleToJob.Quantity>
                          <ppaw:ClearAndAddPackagesFromArticleToJob.Result>
                            <OutArgument x:TypeArguments="pcidp:Job">
                              <mca:CSharpReference x:TypeArguments="pcidp:Job">job</mca:CSharpReference>
                            </OutArgument>
                          </ppaw:ClearAndAddPackagesFromArticleToJob.Result>
                          <ppaw:ClearAndAddPackagesFromArticleToJob.ServiceLocator>
                            <InArgument x:TypeArguments="pcis:IServiceLocator">
                              <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                            </InArgument>
                          </ppaw:ClearAndAddPackagesFromArticleToJob.ServiceLocator>
                        </ppaw:ClearAndAddPackagesFromArticleToJob>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Sequence DisplayName="Create Regular Job" sap2010:WorkflowViewState.IdRef="Sequence_14">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="pcidp:Carton" Name="carton" />
                          <Variable x:TypeArguments="ppad:Article" Name="article" />
                        </Sequence.Variables>
                        <mcwa:ExecuteXamlWorkflow DisplayName="Create Carton From Import Data" sap2010:WorkflowViewState.IdRef="ExecuteXamlWorkflow_4" WorkflowPath="\ImportPlugins\CreateCarton.xaml">
                          <mcwa:ExecuteXamlWorkflow.ChildArguments>
                            <InArgument x:TypeArguments="pcis:IServiceLocator" x:Key="ServiceLocator">
                              <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)" x:Key="Row">
                              <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="pcidp:Package" x:Key="Package">
                              <mca:CSharpValue x:TypeArguments="pcidp:Package">package</mca:CSharpValue>
                            </InArgument>
                          </mcwa:ExecuteXamlWorkflow.ChildArguments>
                        </mcwa:ExecuteXamlWorkflow>
                        <mcwa:ExecuteXamlWorkflow sap2010:Annotation.AnnotationText="Creates a new label from the import row and adds it to the package." DisplayName="Create Label From Import Data" sap2010:WorkflowViewState.IdRef="ExecuteXamlWorkflow_5" WorkflowPath="\ImportPlugins\CreateLabel.xaml">
                          <mcwa:ExecuteXamlWorkflow.ChildArguments>
                            <InArgument x:TypeArguments="pcis:IServiceLocator" x:Key="ServiceLocator">
                              <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)" x:Key="Row">
                              <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                            </InArgument>
                            <InArgument x:TypeArguments="pcidp:Package" x:Key="Package">
                              <mca:CSharpValue x:TypeArguments="pcidp:Package">package</mca:CSharpValue>
                            </InArgument>
                          </mcwa:ExecuteXamlWorkflow.ChildArguments>
                        </mcwa:ExecuteXamlWorkflow>
                        <pxa:AddLabelPrintRequestProductionRestrictionToPackage sap2010:WorkflowViewState.IdRef="AddLabelPrintRequestProductionRestrictionToPackage_1">
                          <pxa:AddLabelPrintRequestProductionRestrictionToPackage.MachineGroup>
                            <InArgument x:TypeArguments="pcidm:MachineGroup">
                              <mca:CSharpValue x:TypeArguments="pcidm:MachineGroup">x7Mg</mca:CSharpValue>
                            </InArgument>
                          </pxa:AddLabelPrintRequestProductionRestrictionToPackage.MachineGroup>
                          <pxa:AddLabelPrintRequestProductionRestrictionToPackage.Package>
                            <InArgument x:TypeArguments="pcidp:Package">
                              <mca:CSharpValue x:TypeArguments="pcidp:Package">package</mca:CSharpValue>
                            </InArgument>
                          </pxa:AddLabelPrintRequestProductionRestrictionToPackage.Package>
                          <pxa:AddLabelPrintRequestProductionRestrictionToPackage.ServiceLocator>
                            <InArgument x:TypeArguments="pcis:IServiceLocator">
                              <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                            </InArgument>
                          </pxa:AddLabelPrintRequestProductionRestrictionToPackage.ServiceLocator>
                        </pxa:AddLabelPrintRequestProductionRestrictionToPackage>
                        <pcwp:AddPackageToJob sap2010:WorkflowViewState.IdRef="AddPackageToJob_2" Quantity="1">
                          <pcwp:AddPackageToJob.Job>
                            <InArgument x:TypeArguments="pcidp:Job">
                              <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                            </InArgument>
                          </pcwp:AddPackageToJob.Job>
                          <pcwp:AddPackageToJob.Package>
                            <InArgument x:TypeArguments="pcidp:Package">
                              <mca:CSharpValue x:TypeArguments="pcidp:Package">package</mca:CSharpValue>
                            </InArgument>
                          </pcwp:AddPackageToJob.Package>
                        </pcwp:AddPackageToJob>
                      </Sequence>
                    </If.Else>
                  </If>
                  <pcwp:SetJobToWaitForProductionTrigger sap2010:Annotation.AnnotationText="Wait for trigger used by box last workflow. Imported job will not produce until trigger is fired." DisplayName="Set Job to wait for trigger" sap2010:WorkflowViewState.IdRef="SetJobToWaitForProductionTrigger_2">
                    <pcwp:SetJobToWaitForProductionTrigger.Job>
                      <InArgument x:TypeArguments="pcidp:Job">
                        <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                      </InArgument>
                    </pcwp:SetJobToWaitForProductionTrigger.Job>
                  </pcwp:SetJobToWaitForProductionTrigger>
                  <pcwp:CreateJob DisplayName="Create Job In JobsService" sap2010:WorkflowViewState.IdRef="CreateJob_2">
                    <pcwp:CreateJob.Job>
                      <InArgument x:TypeArguments="pcidp:Job">
                        <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                      </InArgument>
                    </pcwp:CreateJob.Job>
                    <pcwp:CreateJob.ServiceLocator>
                      <InArgument x:TypeArguments="pcis:IServiceLocator">
                        <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                      </InArgument>
                    </pcwp:CreateJob.ServiceLocator>
                  </pcwp:CreateJob>
                  <pxa:LocateJob sap2010:WorkflowViewState.IdRef="LocateJob_2">
                    <pxa:LocateJob.CustomerUniqueId>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpValue>
                      </InArgument>
                    </pxa:LocateJob.CustomerUniqueId>
                    <pxa:LocateJob.Job>
                      <OutArgument x:TypeArguments="pcidp:Job">
                        <mca:CSharpReference x:TypeArguments="pcidp:Job">job</mca:CSharpReference>
                      </OutArgument>
                    </pxa:LocateJob.Job>
                    <pxa:LocateJob.ServiceLocator>
                      <InArgument x:TypeArguments="pcis:IServiceLocator">
                        <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                      </InArgument>
                    </pxa:LocateJob.ServiceLocator>
                  </pxa:LocateJob>
                  <Assign sap2010:WorkflowViewState.IdRef="Assign_14">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">
                        <mca:CSharpReference x:TypeArguments="x:Int32">quantity</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">
                        <mca:CSharpValue x:TypeArguments="x:Int32">quantity - 1</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </DoWhile>
              <Assign sap2010:WorkflowViewState.IdRef="Assign_15">
                <Assign.To>
                  <OutArgument x:TypeArguments="pcie:IUiCommunicationService">
                    <mca:CSharpReference x:TypeArguments="pcie:IUiCommunicationService">uiCommunicatorService</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="pcie:IUiCommunicationService">
                    <mca:CSharpValue x:TypeArguments="pcie:IUiCommunicationService">ServiceLocator.Locate&lt;IUiCommunicationService&gt;()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <pcw:PublishMessageToUi x:TypeArguments="pcie1:SelectionAlgorithmTypes" sap2010:WorkflowViewState.IdRef="PublishMessageToUi`1_1">
                <pcw:PublishMessageToUi.MachineGroupId>
                  <InArgument x:TypeArguments="s:Nullable(s:Guid)">
                    <mca:CSharpValue x:TypeArguments="s:Nullable(s:Guid)">x7Mg.Id</mca:CSharpValue>
                  </InArgument>
                </pcw:PublishMessageToUi.MachineGroupId>
                <pcw:PublishMessageToUi.MessageType>
                  <InArgument x:TypeArguments="pcie1:MessageTypes">
                    <mca:CSharpValue x:TypeArguments="pcie1:MessageTypes">SelectionAlgorithmMessages.StagingCompleted</mca:CSharpValue>
                  </InArgument>
                </pcw:PublishMessageToUi.MessageType>
                <pcw:PublishMessageToUi.ObjectToPublish>
                  <InArgument x:TypeArguments="pcie1:SelectionAlgorithmTypes">
                    <mca:CSharpValue x:TypeArguments="pcie1:SelectionAlgorithmTypes">SelectionAlgorithmTypes.Order</mca:CSharpValue>
                  </InArgument>
                </pcw:PublishMessageToUi.ObjectToPublish>
                <pcw:PublishMessageToUi.UiCommunicationService>
                  <InArgument x:TypeArguments="pcie:IUiCommunicationService">
                    <mca:CSharpValue x:TypeArguments="pcie:IUiCommunicationService">uiCommunicatorService</mca:CSharpValue>
                  </InArgument>
                </pcw:PublishMessageToUi.UiCommunicationService>
              </pcw:PublishMessageToUi>
            </Sequence>
          </TryCatch.Try>
          <TryCatch.Catches>
            <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_2">
              <ActivityAction x:TypeArguments="s:Exception">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                </ActivityAction.Argument>
                <pcw:AddFailedImportRow DisplayName="Add row to failed import list" sap2010:WorkflowViewState.IdRef="AddFailedImportRow_2">
                  <pcw:AddFailedImportRow.Exception>
                    <InArgument x:TypeArguments="s:Exception">
                      <mca:CSharpValue x:TypeArguments="s:Exception">exception</mca:CSharpValue>
                    </InArgument>
                  </pcw:AddFailedImportRow.Exception>
                  <pcw:AddFailedImportRow.FailedRows>
                    <InArgument x:TypeArguments="scg:IDictionary(x:Int32, x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:Int32, x:String)">FailedRows</mca:CSharpValue>
                    </InArgument>
                  </pcw:AddFailedImportRow.FailedRows>
                  <pcw:AddFailedImportRow.Row>
                    <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                    </InArgument>
                  </pcw:AddFailedImportRow.Row>
                  <pcw:AddFailedImportRow.RowNumber>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">rowNumber</mca:CSharpValue>
                    </InArgument>
                  </pcw:AddFailedImportRow.RowNumber>
                </pcw:AddFailedImportRow>
              </ActivityAction>
            </Catch>
          </TryCatch.Catches>
        </TryCatch>
      </ActivityAction>
    </ForEach>
    <sads:DebugSymbol.Symbol>d2RDOlxHaXRcQm91bmRlZFxXb3JrZmxvd3NcV29ya2Zsb3dzXEltcG9ydFBsdWdpbnNcT3JkZXJcQWx0ZXJuYXRpdmVzV29ya2Zsb3dzXE9yZGVySW1wb3J0WDdCYXRjaC54YW1sgwFkA9sEDgIBAWoFcw4DAcYKdAXZBA8CAQJxL3EwAwHPCm0LbVkDAccKdwt3jQEDAb4KfgnXBBQCAQOAAQ22BBgCAS2+BBHTBCoCAQSHAT+HAUYCAS+IAT6IAUMCAS6MAQ+XARgDAZkKmAEPowEYAwH0CaQBD68BGAMBzwmwAQ+7AScDAagJvAEPkwQZAwGeAZQED58EGAIBeaAED7UEKAIBMMYEF8YEeQIBI8sEF8sEcwIBGcEEF8EEYQIBD9AEF9AEXQIBBZQBFZQBlwEDAawKjwEVjwF1AwGaCqABFaABrQEDAYcKmwEVmwFpAwH1CawBFawBXwMB4gmnARWnAWMDAdAJsAG2AbABuQEDAc4JsAHhAbAB6wEDAc0JuAEVuAFxAwG7CbMBFbMBYgMBqQm+ARO+AWEDAZYJwAERkgQcAwGfAZwEFZwEnQEDAYwBlwQVlwSEAQIBeqMEFaMEZAIBZ7IEFbIEfAIBVagEFagEiAECAUOtBBWtBIUBAgExwQETzAEcAwHxCM0BE90BKwMBuQjeAROFAh4DAccHhgITkQJSAwGiB5ICE6ICKwMB+wajAhPTAhgDAfYF1AIT3wIcAwHRBeACE+sCHAMBrAXsAhP8AisDAYUF/QIT4QMYAwG0AuIDE+gDOwMBoQLpAxP0AyQDAfwB9QMThQQjAwHFAYYEE5EEHAMBoAHJARnJAX4DAYQJxAEZxAFjAwHyCNABGdABcAMB3wjNAdsBzQHkAQMB3gjaARnaAXUDAcwI1QEZ1QFzAwG6CN8BFe8BPQMBgQjwARWEAhoDAcgHjgIZjgJxAwG1B4kCGYkCWwMBoweVAhmVAkgDAaEHkgKtAZICvwEDAaAHnwIZnwJ1AwGOB5oCGZoCZwMB/AamAhmmAnYDAfcFqgIXwwIiAwGuBsYCF9ECIAMBiQbcAhncAmsDAeQF1wIZ1wJoAwHSBegCGegCaQMBvwXjAhnjAmsDAa0F7wIZ7wJIAwGrBewC2QHsAuQBAwGqBfkCGfkCdQMBmAX0Ahn0AmoDAYYFgAMZgAOHAQMBtQKEAxegAyIDAakEowMX3wMiAwHHAuUDGeUDWwMBogLxAxnxA3EDAY8C7AMZ7ANbAwH9AYIEGYIEcQMB6gH9Axn9A2MDAdgB+AMZ+ANrAwHGAY4EGY4EYgMBswGJBBmJBGYDAaEB4gEb4gF/AwGnCN8BuALfAc0CAwGmCOwBG+wBZgMBlAjnARvnAXcDAYII8wEb8wF4AwHJB/cBGYICPgMB2werAhm2AjEDAdQGtwIZwgIiAwGvBs4CHc4CYwMBnAbJAh3JAncDAYoGhQMZnwNEAwGqBKgDGbQDNAMB7AO1AxnBAzQDAa8DwgMZ0gNSAwHyAtMDGd4DMAMByAL3AYUB9wGXAQMBgAj/AR//AWoDAe4H+gEf+gF7AwHcB6sCjQGrApkBAwH6BqsCzgGrAuABAwH5BrMCH7MCewMB5wauAh+uAm0DAdUGvwIfvwKKAQMBwga6Ah+6AnkDAbAGiAMfiANoAwHzBJIDH5IDZAMB4QSXAx+XA2kDAc8EnAMfnAN3AwG9BI0DH40DYQMBqwSuAx+uA3sDAZUEsQMfsQNpAwGBBKsDH6sDdwMB7QO7Ax+7A3sDAdgDvgMfvgNpAwHEA7gDH7gDdwMBsAPFAx/FA2sDAZsDygMfygNpAwGHA88DH88DdwMB8wLbAx/bA2kDAd4C0wNs0wNvAwHdAtYDH9YDYQMByQI=</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="657,62" />
      <sap2010:ViewStateData Id="Assign_10" sap:VirtualizedContainerService.HintSize="587,62" />
      <sap2010:ViewStateData Id="Assign_11" sap:VirtualizedContainerService.HintSize="587,62" />
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="587,100">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ImportFieldLookup`1_11" sap:VirtualizedContainerService.HintSize="587,75">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_12" sap:VirtualizedContainerService.HintSize="539,85">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ImportFieldLookup`1_12" sap:VirtualizedContainerService.HintSize="539,75">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryAddProductionGroupRestriction_3" sap:VirtualizedContainerService.HintSize="200,90">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryAddMachineGroupRestriction_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_8" sap:VirtualizedContainerService.HintSize="200,119">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_12" sap:VirtualizedContainerService.HintSize="539,426">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddDistributedRestrictionBasedOnProductionGroupSettings_2" sap:VirtualizedContainerService.HintSize="539,90">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ImportFieldLookup`1_14" sap:VirtualizedContainerService.HintSize="539,45">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ImportFieldLookup`1_15" sap:VirtualizedContainerService.HintSize="242,45">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_16" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="Sequence_16" sap:VirtualizedContainerService.HintSize="264,271">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_17" sap:VirtualizedContainerService.HintSize="242,62" />
      <sap2010:ViewStateData Id="If_10" sap:VirtualizedContainerService.HintSize="539,474">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_18" sap:VirtualizedContainerService.HintSize="539,62" />
      <sap2010:ViewStateData Id="Assign_13" sap:VirtualizedContainerService.HintSize="539,85">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ImportFieldLookup`1_13" sap:VirtualizedContainerService.HintSize="539,75">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ClearAndAddPackagesFromArticleToJob_2" sap:VirtualizedContainerService.HintSize="200,135">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_13" sap:VirtualizedContainerService.HintSize="222,259">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExecuteXamlWorkflow_4" sap:VirtualizedContainerService.HintSize="270,106" />
      <sap2010:ViewStateData Id="ExecuteXamlWorkflow_5" sap:VirtualizedContainerService.HintSize="270,144">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddLabelPrintRequestProductionRestrictionToPackage_1" sap:VirtualizedContainerService.HintSize="270,22" />
      <sap2010:ViewStateData Id="AddPackageToJob_2" sap:VirtualizedContainerService.HintSize="270,22" />
      <sap2010:ViewStateData Id="Sequence_14" sap:VirtualizedContainerService.HintSize="292,538">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_9" sap:VirtualizedContainerService.HintSize="539,688" />
      <sap2010:ViewStateData Id="SetJobToWaitForProductionTrigger_2" sap:VirtualizedContainerService.HintSize="539,90">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="CreateJob_2" sap:VirtualizedContainerService.HintSize="539,22" />
      <sap2010:ViewStateData Id="LocateJob_2" sap:VirtualizedContainerService.HintSize="539,22" />
      <sap2010:ViewStateData Id="Assign_14" sap:VirtualizedContainerService.HintSize="539,62" />
      <sap2010:ViewStateData Id="Sequence_15" sap:VirtualizedContainerService.HintSize="561,2945">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="DoWhile_1" sap:VirtualizedContainerService.HintSize="587,3109" />
      <sap2010:ViewStateData Id="Assign_15" sap:VirtualizedContainerService.HintSize="587,62" />
      <sap2010:ViewStateData Id="PublishMessageToUi`1_1" sap:VirtualizedContainerService.HintSize="587,22" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="609,3856">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddFailedImportRow_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Catch`1_2" sap:VirtualizedContainerService.HintSize="613,21">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryCatch_2" sap:VirtualizedContainerService.HintSize="627,4083">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_1" sap:VirtualizedContainerService.HintSize="657,4331">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="679,4557">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="PackNet.Importer.Workflows.ImportPlugins.Order.OrderImport_1" sap:VirtualizedContainerService.HintSize="719,4637" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>