<Activity mc:Ignorable="sap sap2010 sads" x:Class="PackNet.Importer.Workflows.ImportPlugins.BoxLast.BoxLastImport"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:mcwa="clr-namespace:Microsoft.Consulting.Workflow.Activities;assembly=Microsoft.Consulting.Workflow.Activities"
 xmlns:pcid="clr-namespace:PackNet.Common.Interfaces.DTO;assembly=PackNet.Common.Interfaces"
 xmlns:pcidm="clr-namespace:PackNet.Common.Interfaces.DTO.Machines;assembly=PackNet.Common.Interfaces"
 xmlns:pcidp="clr-namespace:PackNet.Common.Interfaces.DTO.Packages;assembly=PackNet.Common.Interfaces"
 xmlns:pcis="clr-namespace:PackNet.Common.Interfaces.Services;assembly=PackNet.Common.Interfaces"
 xmlns:pcw="clr-namespace:PackNet.Common.WorkflowActivities;assembly=PackNet.Common"
 xmlns:pcwp="clr-namespace:PackNet.Common.WorkflowActivities.Packages;assembly=PackNet.Common"
 xmlns:pcwr="clr-namespace:PackNet.Common.WorkflowActivities.Restrictions;assembly=PackNet.Common"
 xmlns:pxa="clr-namespace:PackNet.X7Service.Activities;assembly=PackNet.X7Service"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="Importable" Type="InArgument(pcid:Importable)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="ServiceLocator" Type="InArgument(pcis:IServiceLocator)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="FailedRows" Type="InOutArgument(scg:IDictionary(x:Int32, x:String))">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="CustomerUniqueIdsToRemove" Type="InOutArgument(scg:List(x:String))">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap2010:WorkflowViewState.IdRef>PackNet.Importer.Workflows.ImportPlugins.BoxLast.BoxLastImport_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>PackNet.Common.Interfaces.DTO</x:String>
      <x:String>PackNet.Common.Interfaces.Services</x:String>
      <x:String>PackNet.Common.Interfaces.DTO.Packages</x:String>
      <x:String>PackNet.Common.Interfaces.Enums</x:String>
      <x:String>PackNet.Common.Interfaces.DTO.Machines</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>PackNet.X7Service</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Net.Http</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PackNet.Plugins.ArticleService</AssemblyReference>
      <AssemblyReference>CartonPropertyGroupService</AssemblyReference>
      <AssemblyReference>PackNet.Common.Interfaces</AssemblyReference>
      <AssemblyReference>PackNet.Common</AssemblyReference>
      <AssemblyReference>ExternalZebraPrintIntegration</AssemblyReference>
      <AssemblyReference>PackNet.IODeviceService</AssemblyReference>
      <AssemblyReference>PackNet.KvmService</AssemblyReference>
      <AssemblyReference>RestrictionService</AssemblyReference>
      <AssemblyReference>PackNet.ScandataService</AssemblyReference>
      <AssemblyReference>Microsoft.Consulting.Workflow.Activities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Workflows</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Default="0" Name="rowNumber" />
      <Variable x:TypeArguments="pcidp:Job" Name="job" />
      <Variable x:TypeArguments="pcidp:Package" Name="package" />
    </Sequence.Variables>
    <Assign sap2010:Annotation.AnnotationText="rowNumber needs to be initialized to 0 before the loop." sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">
          <mca:CSharpReference x:TypeArguments="x:Int32">rowNumber</mca:CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">0</InArgument>
      </Assign.Value>
    </Assign>
    <ForEach x:TypeArguments="scg:IDictionary(x:String, x:String)" DisplayName="For each row in the import file" sap2010:WorkflowViewState.IdRef="ForEach`1_1">
      <ForEach.Values>
        <InArgument x:TypeArguments="scg:IEnumerable(scg:IDictionary(x:String, x:String))">
          <mca:CSharpValue x:TypeArguments="scg:IEnumerable(scg:IDictionary(x:String, x:String))">Importable.ImportedItems</mca:CSharpValue>
        </InArgument>
      </ForEach.Values>
      <ActivityAction x:TypeArguments="scg:IDictionary(x:String, x:String)">
        <ActivityAction.Argument>
          <DelegateInArgument x:TypeArguments="scg:IDictionary(x:String, x:String)" Name="row" />
        </ActivityAction.Argument>
        <Sequence DisplayName="Row specific logic" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <Sequence.Variables>
            <Variable x:TypeArguments="pcidm:MachineGroup" Name="x7Mg" />
            <Variable x:TypeArguments="pcis:IMachineGroupService" Name="mgService" />
            <Variable x:TypeArguments="x:String" Default="MG1" Name="machineGroupX7Alias" />
            <Variable x:TypeArguments="x:Boolean" Default="False" Name="couldAddJob" />
          </Sequence.Variables>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_5">
            <Assign.To>
              <OutArgument x:TypeArguments="pcis:IMachineGroupService">
                <mca:CSharpReference x:TypeArguments="pcis:IMachineGroupService">mgService</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="pcis:IMachineGroupService">
                <mca:CSharpValue x:TypeArguments="pcis:IMachineGroupService">ServiceLocator.Locate&lt;IMachineGroupService&gt;()</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:WorkflowViewState.IdRef="Assign_6">
            <Assign.To>
              <OutArgument x:TypeArguments="pcidm:MachineGroup">
                <mca:CSharpReference x:TypeArguments="pcidm:MachineGroup">x7Mg</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="pcidm:MachineGroup">
                <mca:CSharpValue x:TypeArguments="pcidm:MachineGroup">mgService.MachineGroups.FirstOrDefault(mg =&gt; mg.Alias == machineGroupX7Alias)</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <Assign sap2010:Annotation.AnnotationText="Track row number in case of import failure for logging purposes" DisplayName="Increment row number" sap2010:WorkflowViewState.IdRef="Assign_2">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">rowNumber</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">rowNumber + 1</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
          <TryCatch sap2010:WorkflowViewState.IdRef="TryCatch_1">
            <TryCatch.Try>
              <Sequence DisplayName="Create Job" sap2010:WorkflowViewState.IdRef="Sequence_1">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Boolean" Default="False" Name="hasProductionGroupRestriction" />
                  <Variable x:TypeArguments="x:Int32" Default="1" Name="quantity" />
                  <Variable x:TypeArguments="x:String" Name="uniqueId" />
                </Sequence.Variables>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_4">
                  <Assign.To>
                    <OutArgument x:TypeArguments="pcidp:Job">
                      <mca:CSharpReference x:TypeArguments="pcidp:Job">job</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="pcidp:Job">
                      <mca:CSharpValue x:TypeArguments="pcidp:Job">new Job(SelectionAlgorithmTypes.BoxLast)</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap2010:Annotation.AnnotationText="Create new instance of a Package before adding cartons or labels." sap2010:WorkflowViewState.IdRef="Assign_3">
                  <Assign.To>
                    <OutArgument x:TypeArguments="pcidp:Package">
                      <mca:CSharpReference x:TypeArguments="pcidp:Package">package</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="pcidp:Package">
                      <mca:CSharpValue x:TypeArguments="pcidp:Package">new Package()</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <pcw:ImportFieldLookup x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="This is a custom ImportFieldLookup CodeActivity - it looks for the CustomerUniqueId field and returns the value as a string." DisplayName="Get CustomerUniqueId" FieldToRetrieve="AdditionalInfo13" sap2010:WorkflowViewState.IdRef="ImportFieldLookup`1_1">
                  <pcw:ImportFieldLookup.DefaultValue>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">Guid.NewGuid().ToString()</mca:CSharpValue>
                    </InArgument>
                  </pcw:ImportFieldLookup.DefaultValue>
                  <pcw:ImportFieldLookup.OutputValue>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String">uniqueId</mca:CSharpReference>
                    </OutArgument>
                  </pcw:ImportFieldLookup.OutputValue>
                  <pcw:ImportFieldLookup.Row>
                    <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                    </InArgument>
                  </pcw:ImportFieldLookup.Row>
                </pcw:ImportFieldLookup>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_7">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">uniqueId +"-"+DateTime.Now.ToString("hhmmss")</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap2010:WorkflowViewState.IdRef="Assign_8">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">
                      <mca:CSharpReference x:TypeArguments="x:String">job.Title</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpValue>
                    </InArgument>
                  </Assign.Value>
                </Assign>
                <mcwa:ExecuteXamlWorkflow sap2010:Annotation.AnnotationText="Creates new carton from the import row and adds it to the package." DisplayName="Create Carton From Import Data" sap2010:WorkflowViewState.IdRef="ExecuteXamlWorkflow_1" WorkflowPath="\ImportPlugins\CreateCarton.xaml">
                  <mcwa:ExecuteXamlWorkflow.ChildArguments>
                    <InArgument x:TypeArguments="pcidp:Package" x:Key="Package">
                      <mca:CSharpValue x:TypeArguments="pcidp:Package">package</mca:CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="pcis:IServiceLocator" x:Key="ServiceLocator">
                      <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)" x:Key="Row">
                      <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                    </InArgument>
                  </mcwa:ExecuteXamlWorkflow.ChildArguments>
                </mcwa:ExecuteXamlWorkflow>
                <mcwa:ExecuteXamlWorkflow sap2010:Annotation.AnnotationText="Creates a new label from the import row and adds it to the package." DisplayName="Create Label From Import Data" sap2010:WorkflowViewState.IdRef="ExecuteXamlWorkflow_2" WorkflowPath="\ImportPlugins\CreateLabel.xaml">
                  <mcwa:ExecuteXamlWorkflow.ChildArguments>
                    <InArgument x:TypeArguments="pcis:IServiceLocator" x:Key="ServiceLocator">
                      <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)" x:Key="Row">
                      <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                    </InArgument>
                    <InArgument x:TypeArguments="pcidp:Package" x:Key="Package">
                      <mca:CSharpValue x:TypeArguments="pcidp:Package">package</mca:CSharpValue>
                    </InArgument>
                  </mcwa:ExecuteXamlWorkflow.ChildArguments>
                </mcwa:ExecuteXamlWorkflow>
                <pcw:ImportFieldLookup x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="Import quantity from row. If no quantity is specified, default to 1." DefaultValue="1" DisplayName="Get Quantity" FieldToRetrieve="Quantity" sap2010:WorkflowViewState.IdRef="ImportFieldLookup`1_2">
                  <pcw:ImportFieldLookup.OutputValue>
                    <OutArgument x:TypeArguments="x:Int32">
                      <mca:CSharpReference x:TypeArguments="x:Int32">quantity</mca:CSharpReference>
                    </OutArgument>
                  </pcw:ImportFieldLookup.OutputValue>
                  <pcw:ImportFieldLookup.Row>
                    <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                    </InArgument>
                  </pcw:ImportFieldLookup.Row>
                </pcw:ImportFieldLookup>
                <pcwp:AddPackageToJob sap2010:Annotation.AnnotationText="Adds package to job. Use quantity to specify how many copies of the package to add." DisplayName="Add Package To Job" sap2010:WorkflowViewState.IdRef="AddPackageToJob_1">
                  <pcwp:AddPackageToJob.Job>
                    <InArgument x:TypeArguments="pcidp:Job">
                      <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                    </InArgument>
                  </pcwp:AddPackageToJob.Job>
                  <pcwp:AddPackageToJob.Package>
                    <InArgument x:TypeArguments="pcidp:Package">
                      <mca:CSharpValue x:TypeArguments="pcidp:Package">package</mca:CSharpValue>
                    </InArgument>
                  </pcwp:AddPackageToJob.Package>
                  <pcwp:AddPackageToJob.Quantity>
                    <InArgument x:TypeArguments="x:Int32">
                      <mca:CSharpValue x:TypeArguments="x:Int32">quantity</mca:CSharpValue>
                    </InArgument>
                  </pcwp:AddPackageToJob.Quantity>
                </pcwp:AddPackageToJob>
                <pcwp:SetJobToWaitForProductionTrigger sap2010:Annotation.AnnotationText="Wait for trigger used by box last workflow. Imported job will not produce until trigger is fired." DisplayName="Set Job to wait for trigger" sap2010:WorkflowViewState.IdRef="SetJobToWaitForProductionTrigger_1">
                  <pcwp:SetJobToWaitForProductionTrigger.Job>
                    <InArgument x:TypeArguments="pcidp:Job">
                      <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                    </InArgument>
                  </pcwp:SetJobToWaitForProductionTrigger.Job>
                </pcwp:SetJobToWaitForProductionTrigger>
                <pcwr:TryAddProductionGroupRestriction DefaultLookupValue="{x:Null}" sap2010:Annotation.AnnotationText="Looks for a production group restriction value in the imported row. If one exists the restriction is added to the job." DisplayName="Try Add Production Group Restriction" FieldToRetrieve="ProductionGroupAlias" sap2010:WorkflowViewState.IdRef="TryAddProductionGroupRestriction_1">
                  <pcwr:TryAddProductionGroupRestriction.HasRestriction>
                    <OutArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpReference x:TypeArguments="x:Boolean">hasProductionGroupRestriction</mca:CSharpReference>
                    </OutArgument>
                  </pcwr:TryAddProductionGroupRestriction.HasRestriction>
                  <pcwr:TryAddProductionGroupRestriction.ImportRow>
                    <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                    </InArgument>
                  </pcwr:TryAddProductionGroupRestriction.ImportRow>
                  <pcwr:TryAddProductionGroupRestriction.ProductionItem>
                    <InArgument x:TypeArguments="pcidp:Restrictable">
                      <mca:CSharpValue x:TypeArguments="pcidp:Restrictable">job</mca:CSharpValue>
                    </InArgument>
                  </pcwr:TryAddProductionGroupRestriction.ProductionItem>
                </pcwr:TryAddProductionGroupRestriction>
                <pcwp:CreateJob sap2010:WorkflowViewState.IdRef="CreateJob_1">
                  <pcwp:CreateJob.Job>
                    <InArgument x:TypeArguments="pcidp:Job">
                      <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                    </InArgument>
                  </pcwp:CreateJob.Job>
                  <pcwp:CreateJob.ServiceLocator>
                    <InArgument x:TypeArguments="pcis:IServiceLocator">
                      <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                    </InArgument>
                  </pcwp:CreateJob.ServiceLocator>
                </pcwp:CreateJob>
                <pxa:LocateJob sap2010:WorkflowViewState.IdRef="LocateJob_1">
                  <pxa:LocateJob.CustomerUniqueId>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpValue>
                    </InArgument>
                  </pxa:LocateJob.CustomerUniqueId>
                  <pxa:LocateJob.Job>
                    <OutArgument x:TypeArguments="pcidp:Job">
                      <mca:CSharpReference x:TypeArguments="pcidp:Job">job</mca:CSharpReference>
                    </OutArgument>
                  </pxa:LocateJob.Job>
                  <pxa:LocateJob.ServiceLocator>
                    <InArgument x:TypeArguments="pcis:IServiceLocator">
                      <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                    </InArgument>
                  </pxa:LocateJob.ServiceLocator>
                </pxa:LocateJob>
                <pxa:CreateProductionSetAndAddToQueue sap2010:Annotation.AnnotationText="Create ProductionSet and add Job to Machine Group Production Queue" DisplayName="Add Job to Queue" sap2010:WorkflowViewState.IdRef="CreateProductionSetAndAddToQueue_1">
                  <pxa:CreateProductionSetAndAddToQueue.CouldAdd>
                    <OutArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpReference x:TypeArguments="x:Boolean">couldAddJob</mca:CSharpReference>
                    </OutArgument>
                  </pxa:CreateProductionSetAndAddToQueue.CouldAdd>
                  <pxa:CreateProductionSetAndAddToQueue.Job>
                    <InArgument x:TypeArguments="pcidp:Job">
                      <mca:CSharpValue x:TypeArguments="pcidp:Job">job</mca:CSharpValue>
                    </InArgument>
                  </pxa:CreateProductionSetAndAddToQueue.Job>
                  <pxa:CreateProductionSetAndAddToQueue.MachineGroup>
                    <InArgument x:TypeArguments="pcidm:MachineGroup">
                      <mca:CSharpValue x:TypeArguments="pcidm:MachineGroup">x7Mg</mca:CSharpValue>
                    </InArgument>
                  </pxa:CreateProductionSetAndAddToQueue.MachineGroup>
                  <pxa:CreateProductionSetAndAddToQueue.ServiceLocator>
                    <InArgument x:TypeArguments="pcis:IServiceLocator">
                      <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                    </InArgument>
                  </pxa:CreateProductionSetAndAddToQueue.ServiceLocator>
                </pxa:CreateProductionSetAndAddToQueue>
                <If sap2010:WorkflowViewState.IdRef="If_1">
                  <If.Condition>
                    <InArgument x:TypeArguments="x:Boolean">
                      <mca:CSharpValue x:TypeArguments="x:Boolean">couldAddJob</mca:CSharpValue>
                    </InArgument>
                  </If.Condition>
                  <If.Then>
                    <pxa:SendJobIdToX7 DisplayName="Send job to X7" IsFailed="False">
                      <pxa:SendJobIdToX7.JobId>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpValue>
                        </InArgument>
                      </pxa:SendJobIdToX7.JobId>
                      <pxa:SendJobIdToX7.MachineGroup>
                        <InArgument x:TypeArguments="pcidm:MachineGroup">
                          <mca:CSharpValue x:TypeArguments="pcidm:MachineGroup">x7Mg</mca:CSharpValue>
                        </InArgument>
                      </pxa:SendJobIdToX7.MachineGroup>
                      <pxa:SendJobIdToX7.ServiceLocator>
                        <InArgument x:TypeArguments="pcis:IServiceLocator">
                          <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                        </InArgument>
                      </pxa:SendJobIdToX7.ServiceLocator>
                      <sap2010:WorkflowViewState.IdRef>SendJobIdToX7_1</sap2010:WorkflowViewState.IdRef>
                    </pxa:SendJobIdToX7>
                  </If.Then>
                  <If.Else>
                    <pxa:SendJobIdToX7 DisplayName="Send Job scan Failed to X7" IsFailed="True">
                      <pxa:SendJobIdToX7.JobId>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">job.CustomerUniqueId</mca:CSharpValue>
                        </InArgument>
                      </pxa:SendJobIdToX7.JobId>
                      <pxa:SendJobIdToX7.MachineGroup>
                        <InArgument x:TypeArguments="pcidm:MachineGroup">
                          <mca:CSharpValue x:TypeArguments="pcidm:MachineGroup">x7Mg</mca:CSharpValue>
                        </InArgument>
                      </pxa:SendJobIdToX7.MachineGroup>
                      <pxa:SendJobIdToX7.ServiceLocator>
                        <InArgument x:TypeArguments="pcis:IServiceLocator">
                          <mca:CSharpValue x:TypeArguments="pcis:IServiceLocator">ServiceLocator</mca:CSharpValue>
                        </InArgument>
                      </pxa:SendJobIdToX7.ServiceLocator>
                      <sap2010:WorkflowViewState.IdRef>SendJobIdToX7_2</sap2010:WorkflowViewState.IdRef>
                    </pxa:SendJobIdToX7>
                  </If.Else>
                </If>
              </Sequence>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                  </ActivityAction.Argument>
                  <pcw:AddFailedImportRow DisplayName="Add row to failed import list" sap2010:WorkflowViewState.IdRef="AddFailedImportRow_1">
                    <pcw:AddFailedImportRow.Exception>
                      <InArgument x:TypeArguments="s:Exception">
                        <mca:CSharpValue x:TypeArguments="s:Exception">exception</mca:CSharpValue>
                      </InArgument>
                    </pcw:AddFailedImportRow.Exception>
                    <pcw:AddFailedImportRow.FailedRows>
                      <InArgument x:TypeArguments="scg:IDictionary(x:Int32, x:String)">
                        <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:Int32, x:String)">FailedRows</mca:CSharpValue>
                      </InArgument>
                    </pcw:AddFailedImportRow.FailedRows>
                    <pcw:AddFailedImportRow.Row>
                      <InArgument x:TypeArguments="scg:IDictionary(x:String, x:String)">
                        <mca:CSharpValue x:TypeArguments="scg:IDictionary(x:String, x:String)">row</mca:CSharpValue>
                      </InArgument>
                    </pcw:AddFailedImportRow.Row>
                    <pcw:AddFailedImportRow.RowNumber>
                      <InArgument x:TypeArguments="x:Int32">
                        <mca:CSharpValue x:TypeArguments="x:Int32">rowNumber</mca:CSharpValue>
                      </InArgument>
                    </pcw:AddFailedImportRow.RowNumber>
                  </pcw:AddFailedImportRow>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
        </Sequence>
      </ActivityAction>
    </ForEach>
    <sads:DebugSymbol.Symbol>d2JDOlxHaXRcQm91bmRlZFxXb3JrZmxvd3NcV29ya2Zsb3dzXEltcG9ydFBsdWdpbnNcQm94TGFzdFxBbHRlcm5hdGl2ZVdvcmtmbG93c1xCb3hMYXN0SW1wb3J0WDcueGFtbF1cA8EDDgIBAV4zXjYCAQJiBWsOAwHUBmwFvwMPAgEDaS9pMAMB3QZlC2VZAwHVBm8Lb40BAwHMBnYJvQMUAgEEejp6PwIBBns7e0ICAQV9C4gBFAMBsQaJAQuUARQDAZYGlQELoAEUAwH7BaEBC7wDFgIBB4UBEYUBkwEDAb8GgAERgAFxAwGyBpEBEZEBqQEDAaQGjAERjAFlAwGXBp0BEZ0BWwMBiQaYARGYAV8DAfwFowEPmwMaAgFBowMTuAMsAgEIpQFBpQFIAgFDpgE/pgFCAgFCqQERtAEaAwHaBbUBEcABGgMBuQXBARHRASkDAYcF0gER3QEaAwHmBN4BEekBGgMBxQTqARH2ASwDAZQE9wERgwIsAwHjA4QCEY8CKQMBwAOQAhGgAigDAY8DoQIRpwI5AwH+AqgCEbgCOQMBzAK5AhHEAiIDAasCxQIR1QIhAwH6AdYCEesCOAMBuQHsAhGaAxYCAUSrAxmrA3sCATOwAxmwA3UCASWmAxmmA2MCARe1Axm1A18CAQmxARexAX4DAesFrAEXrAFhAwHbBb0BF70BZwMBygW4ARe4AWkDAboFxAEXxAFuAwGpBcEBlwLBAakCAwGoBc4BF84BcwMBmAXJARfJAWUDAYgF2gEX2gGCAQMB9wTVARfVAXEDAecE5gEX5gFpAwHWBOEBF+EBZgMBxgTzARfzAXMDAbUE7QEX7QFhAwGlBPABF/ABbwMBlQT9ARf9AXMDAYQEgAIXgAJhAwH0A/oBF/oBbwMB5AOEArgBhAK7AQMB4gOEAucBhALxAQMB4QOMAheMAnMDAdEDhwIXhwJkAwHBA5gCF5gCYQMBsAOdAhedAlwDAaADkwIXkwJZAwGQA6QCF6QCWQMB/wKrAherAnsDAe4CqAK0AqgCygIDAe0CtQIXtQJiAwHdArACF7ACcwMBzQLBAhfBAm8DAbwCvAIXvAJZAwGsAtICF9ICbwMBmwLNAhfNAmEDAYsCyAIXyAJpAwH7AdkCF9kCaQMB6gHjAhfjAmMDAdoB6AIX6AJvAwHKAd4CF94CWQMBugHvAhfvAmECAUXzAhWEAykDAYcBhwMVmAMpAgFV+wIb+wJnAwGpAfMCTvMCVQMBqAH2Ahv2Am0DAZgBgAMbgANzAwGIAY8DG48DZwIBd4cDWocDYAIBdooDG4oDbQIBZpQDG5QDcwIBVg==</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="556,100">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="504,62" />
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="504,62" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="504,100">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="464,62" />
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="464,100">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ImportFieldLookup`1_1" sap:VirtualizedContainerService.HintSize="464,105">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="464,62" />
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="464,62" />
      <sap2010:ViewStateData Id="ExecuteXamlWorkflow_1" sap:VirtualizedContainerService.HintSize="464,144">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ExecuteXamlWorkflow_2" sap:VirtualizedContainerService.HintSize="464,144">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ImportFieldLookup`1_2" sap:VirtualizedContainerService.HintSize="464,75">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddPackageToJob_1" sap:VirtualizedContainerService.HintSize="464,75">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SetJobToWaitForProductionTrigger_1" sap:VirtualizedContainerService.HintSize="464,90">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryAddProductionGroupRestriction_1" sap:VirtualizedContainerService.HintSize="464,90">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="CreateJob_1" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="LocateJob_1" sap:VirtualizedContainerService.HintSize="464,22" />
      <sap2010:ViewStateData Id="CreateProductionSetAndAddToQueue_1" sap:VirtualizedContainerService.HintSize="464,75">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="SendJobIdToX7_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="SendJobIdToX7_2" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="464,210" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="486,2022">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="AddFailedImportRow_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="Catch`1_1" sap:VirtualizedContainerService.HintSize="490,21">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryCatch_1" sap:VirtualizedContainerService.HintSize="504,2249" />
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="526,2717">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="ForEach`1_1" sap:VirtualizedContainerService.HintSize="556,2867" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="578,3131">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="PackNet.Importer.Workflows.ImportPlugins.BoxLast.BoxLastImport_1" sap:VirtualizedContainerService.HintSize="618,3211" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>